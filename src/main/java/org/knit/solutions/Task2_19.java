package org.knit.solutions;

import org.knit.TaskDescription;

/**
 * Задача № 19
 * Условие задачи:
 * Даны два целочисленных массива nums1 и nums2, отсортированных в неубывающем порядке,
 * а также два целых числа m и n, представляющих количество элементов в nums1 и nums2 соответственно.
 *
 * Требуется:
 * Объединить nums1 и nums2 в один массив, отсортированный в неубывающем порядке.
 *
 * Важные условия:
 * 1) Итоговый отсортированный массив должен быть сохранён внутри массива nums1 (функция не должна ничего возвращать).
 * 2) Массив nums1 имеет длину m + n, где:
 *     * Первые m элементов — значимые (их нужно объединять с nums2).
 *     * Последние n элементов заполнены нулями и должны быть проигнорированы.
 * 3) Длина nums2 равна n.
 *
 * Ограничения:
 * 1) nums1.length == m + n
 * 2) nums2.length == n
 * 3) 0 <= m, n <= 200
 * 4) 1 <= m + n <= 200
 * 5) -10^9 <= nums1[i], nums2[j] <= 10^9
 *
 * Примечания:
 * 1) Нельзя использовать дополнительную память для создания нового массива (кроме временных переменных).
 * 2) Решение должно работать за линейное время O(m + n).

 *
 * Напишите решение, а затем напишите JUnit тесты для проверки решения
 * Тесты должны покрывать
 * --Обычные случаи (с нулями и без).
 * --Краевые случаи (пустые массивы, все нули, нули на границах).
 * --Производительность (большие массивы). // просто зафиксировать время выполнения по производительности
 * эмпирическим путем
 */
@TaskDescription(taskNumber = 19, taskDescription = "Задача № 19 JUnit тесты")
public class Task2_19 implements Solution {
    @Override
    public void execute() {
    }
}
